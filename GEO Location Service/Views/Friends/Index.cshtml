@model IEnumerable<GEO_Location_Service.Models.Friends>

@{
    ViewData["Title"] = "Index";
    var friendsJson = System.Text.Json.JsonSerializer.Serialize(Model.Select(friend => new
    {
        id = friend.Id,
        name = friend.Name,
        lat = friend.Let,
        lon = friend.Lon
    }));
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Let)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Lon)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Let)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Lon)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="map" style="width:100%; height:500px"></div>
<div id="status-message" style="margin-top: 20px; color: red;"></div>

<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

<script>
    var map = L.map('map').setView([22.806284, 89.553149], 13);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var friendIcons = [
        L.icon({
            iconUrl: '/icons/3001764.png',
            iconSize: [41, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
        }),
        L.icon({
            iconUrl: '/icons/146031.png',
            iconSize: [41, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
        }),
        L.icon({
            iconUrl: '/icons/man_person17.png',
            iconSize: [41, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
        })
    ];

    function calculateDistance(lat1, lon1, lat2, lon2) {
        function toRad(x) {
            return x * Math.PI / 180;
        }

        var R = 6371; // Radius of the earth in km
        var dLat = toRad(lat2 - lat1);
        var dLon = toRad(lon2 - lon1);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c; // Distance in km
        return d;
    }

    var friends = @Html.Raw(friendsJson);

    // Automatically find the nearest friend
    var userLocation = null;

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            userLocation = {
                lat: position.coords.latitude,
                lon: position.coords.longitude
            };

            var myLocationMarker = L.marker([userLocation.lat, userLocation.lon], {
                icon: L.icon({
                    iconUrl: '/icons/me.png',
                    iconSize: [41, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                })
            }).addTo(map)
                .bindPopup('My location.')
                .openPopup();

            friends.forEach(function (friend, index) {
                var distance = calculateDistance(userLocation.lat, userLocation.lon, friend.lat, friend.lon);

                var marker = L.marker([friend.lat, friend.lon], {
                    icon: friendIcons[index % friendIcons.length]
                }).addTo(map)
                    .bindPopup(friend.name + '<br>Distance: ' + distance.toFixed(2) + ' km');

                marker.on('click', function () {
                 
                    if (map.routingControl) {
                        map.removeControl(map.routingControl);
                    }

              
                    map.routingControl = L.Routing.control({
                        waypoints: [
                            L.latLng(userLocation.lat, userLocation.lon),
                            L.latLng(friend.lat, friend.lon)
                        ],
                        routeWhileDragging: true,
                        router: L.Routing.osrmv1({
                            serviceUrl: 'https://router.project-osrm.org/route/v1'
                        }),
                        showAlternatives: false,
                        lineOptions: {
                            styles: [{ color: 'blue', opacity: 0.6, weight: 4 }]
                        },
                        createMarker: function (i, waypoint, n) {
                            var icon = (i === 0) ? myLocationMarker.getIcon() : friendIcons[index % friendIcons.length];
                            return L.marker(waypoint.latLng, {
                                icon: icon
                            }).bindPopup((i === 0) ? 'Your current location.' : friend.name + '<br>Distance: ' + distance.toFixed(2) + ' km');
                        }
                    }).addTo(map)
                        .on('routesfound', function (e) {
                            document.getElementById('status-message').innerText = 'Routing successful!';
                        })
                        .on('routingerror', function (e) {
                            document.getElementById('status-message').innerText = 'Routing failed: ' + e.error.message;
                        });
                });
            });
        }, function () {
            alert('Geolocation failed.');
        });
    } else {
        alert('Geolocation is not supported by this browser.');
    }
</script>
