@model IEnumerable<GEO_Location_Service.Models.Friends>

@{
    ViewData["Title"] = "Index";
    var friendsJson = System.Text.Json.JsonSerializer.Serialize(Model.Select(friend => new
    {
        id = friend.Id,
        name = friend.Name,
        lat = friend.Let,
        lon = friend.Lon
    }));
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Let)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Lon)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Let)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Lon)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="map" style="width:100%; height:500px"></div>

<script src="~/lib/leaflet/leaflet.js"></script>
<script src="~/lib/leaflet/leaflet.min.js"></script>

<script>
    var map = L.map('map').setView([22.806284, 89.553149], 13);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var friendIcons = [
        L.icon({
            iconUrl: '/icons/3001764.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
        }),
        L.icon({
            iconUrl: '/icons/146031.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
        }),
        L.icon({
            iconUrl: '/icons/man_person17.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
        })
    ];

    function calculateDistance(lat1, lon1, lat2, lon2) {
        function toRad(x) {
            return x * Math.PI / 180;
        }

        var R = 6371; // Radius of the earth in km
        var dLat = toRad(lat2 - lat1);
        var dLon = toRad(lon2 - lon1);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c; // Distance in km
        return d;
    }

    var friends = @Html.Raw(friendsJson);

    friends.forEach(function (friend, index) {
        L.marker([friend.lat, friend.lon], {
            icon: friendIcons[index % friendIcons.length]
        }).addTo(map)
            .bindPopup(friend.name);
    });

    // Automatically find nearest friend and draw path
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            var lat = position.coords.latitude;
            var lon = position.coords.longitude;

            var myLocationMarker = L.marker([lat, lon], {
                icon: L.icon({
                    iconUrl: 'Icons/profile-pic (10).png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                })
            }).addTo(map)
                .bindPopup('You')
                .openPopup();

            var nearestFriend = null;
            var nearestDistance = Infinity;

            friends.forEach(function (friend) {
                var distance = calculateDistance(lat, lon, friend.lat, friend.lon);

                if (distance < nearestDistance) {
                    nearestDistance = distance;
                    nearestFriend = friend;
                }
            });

            if (nearestFriend) {
                L.polyline([
                    [lat, lon],
                    [nearestFriend.lat, nearestFriend.lon]
                ], { color: 'blue' }).addTo(map)
                    .bindPopup('Shortest path to ' + nearestFriend.name + ' (' + nearestDistance.toFixed(2) + ' km)');
            }
        }, function () {
            alert('Geolocation failed.');
        });
    } else {
        alert('Geolocation is not supported by this browser.');
    }
</script>
